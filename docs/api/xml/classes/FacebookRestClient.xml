<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="FacebookRestClient" namespace="" name="FacebookRestClient" abstract="false" final="false" start="37" end="3337">
  <file path="/var/www/_modules/sharethis/trunk/docs/en/phpdox/../../../third_party" file="facebookapi_php5_restlib.php" realpath="/var/www/_modules/sharethis/trunk/third_party/facebookapi_php5_restlib.php" size="134509" time="2015-03-14T10:23:27+13:00" unixtime="1426281807" sha1="bbee86a54475849a1b6664ee646be7e777c8cd92" relative="third_party/facebookapi_php5_restlib.php"/>
  <member name="secret" type="{unknown}" visibility="public" line="38"/>
  <member name="session_key" type="{unknown}" visibility="public" line="39"/>
  <member name="api_key" type="{unknown}" visibility="public" line="40"/>
  <member name="friends_list" type="{unknown}" visibility="public" line="43"/>
  <member name="user" type="{unknown}" visibility="public" line="44"/>
  <member name="added" type="{unknown}" visibility="public" line="47"/>
  <member name="is_user" type="{unknown}" visibility="public" line="48"/>
  <member name="canvas_user" type="{unknown}" visibility="public" line="52"/>
  <member name="batch_mode" type="{unknown}" visibility="public" line="53"/>
  <member name="batch_queue" type="{unknown}" visibility="private" line="54"/>
  <member name="pending_batch" type="{unknown}" visibility="private" line="55"/>
  <member name="call_as_apikey" type="{unknown}" visibility="private" line="56"/>
  <member name="use_curl_if_available" type="{unknown}" visibility="private" line="57"/>
  <member name="format" type="{unknown}" default="null" visibility="private" line="58"/>
  <member name="using_session_secret" type="{unknown}" default="false" visibility="private" line="59"/>
  <member name="rawData" type="{unknown}" default="null" visibility="private" line="60"/>
  <constant name="BATCH_MODE_DEFAULT" value="0"/>
  <constant name="BATCH_MODE_SERVER_PARALLEL" value="0"/>
  <constant name="BATCH_MODE_SERIAL_ONLY" value="2"/>
  <constructor name="__construct" start="73" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create the client."/>
      <param description="if you haven't gotten a session key yet, leave" type="string" variable="$session_key">this as null and then set it later by just
                           directly accessing the $session_key member
                           variable.</param>
    </docblock>
    <parameter name="api_key" byreference="false" type="{unknown}"/>
    <parameter name="secret" byreference="false" type="{unknown}"/>
    <parameter name="session_key" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="set_user" start="132" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the default user id for methods that allow the caller to pass an uid parameter to identify the target user instead of a session key. This currently applies to the user preferences methods."/>
      <param description="the user id" variable="$uid" type="int"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
  </method>
  <method name="use_session_secret" start="141" end="144" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Switch to use the session secret instead of the app secret, for desktop and unsecured environment"/>
    </docblock>
    <parameter name="session_secret" byreference="false" type="{unknown}"/>
  </method>
  <method name="set_use_curl_if_available" start="153" end="155" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Normally, if the cURL library/PHP extension is available, it is used for HTTP transactions.  This allows that behavior to be overridden, falling back to a vanilla-PHP implementation even if cURL is installed."/>
      <param description="whether or not to use cURL if available" variable="$use_curl_if_available" type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="use_curl_if_available" byreference="false" type="{unknown}"/>
  </method>
  <method name="begin_batch" start="160" end="169" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Start a batch operation."/>
    </docblock>
  </method>
  <method name="end_batch" start="174" end="185" abstract="false" final="false" static="false" visibility="public"/>
  <method name="pending_batch" start="190" end="192" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="are we currently queueing up calls for a batch?"/>
    </docblock>
  </method>
  <method name="execute_server_side_batch" start="194" end="231" abstract="false" final="false" static="false" visibility="private"/>
  <method name="begin_permissions_mode" start="233" end="235" abstract="false" final="false" static="false" visibility="public">
    <parameter name="permissions_apikey" byreference="false" type="{unknown}"/>
  </method>
  <method name="end_permissions_mode" start="237" end="239" abstract="false" final="false" static="false" visibility="public"/>
  <method name="set_use_ssl_resources" start="249" end="251" abstract="false" final="false" static="false" visibility="public">
    <parameter name="is_ssl" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="application_getPublicInfo" start="265" end="272" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns public information for an application (as shown in the application directory) by either application ID, API key, or canvas page name."/>
      <param description="(Optional) app id" type="int" variable="$application_id"/>
      <param description="(Optional) api key" type="string" variable="$application_api_key"/>
      <param description="(Optional) canvas name" type="string" variable="$application_canvas_name">Exactly one argument must be specified, otherwise it is an error.</param>
      <return description="An array of public information about the application." type="array"/>
    </docblock>
    <parameter name="application_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="application_api_key" byreference="false" type="{unknown}" default="null"/>
    <parameter name="application_canvas_name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="auth_createToken" start="281" end="283" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates an authentication token to be used as part of the desktop login flow.  For more information, please see http://wiki.developers.facebook.com/index.php/Auth.createToken."/>
      <return description="An authentication token." type="string"/>
    </docblock>
  </method>
  <method name="auth_getSession" start="296" end="309" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the session information available after current user logs in."/>
      <param description="the token returned by" type="string" variable="$auth_token">auth_createToken or passed back to
                                      your callback_url.</param>
      <param description="whether the session returned should" type="object" variable="$generate_session_secret">include a session secret<type full="bool" namespace="" name="bool"/></param>
      <return description="An assoc array containing session_key, uid" type="array"/>
    </docblock>
    <parameter name="auth_token" byreference="false" type="{unknown}"/>
    <parameter name="generate_session_secret" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="desktop apps have a special secret" line="304"/>
    </inline>
  </method>
  <method name="auth_promoteSession" start="320" end="322" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generates a session-specific secret. This is for integration with client-side API calls, such as the JS library."/>
      <return description="A session secret for the current promoted session" type="array"/>
      <error value="API_EC_PARAM_SESSION_KEY">API_EC_PARAM_UNKNOWN</error>
    </docblock>
  </method>
  <method name="auth_expireSession" start="331" end="333" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Expires the session that is currently being used.  If this call is successful, no further calls to the API (which require a session) can be made until a valid session is created."/>
      <return description="true if session expiration was successful, false otherwise" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="auth_revokeExtendedPermission" start="343" end="346" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revokes the given extended permission that the user granted at some  prior time (for instance, offline_access or email).  If no user is  provided, it will be revoked for the user of the current session.">@param  string  $perm  The permission to revoke
 @param  int     $uid   The user for whom to revoke the permission.</description>
    </docblock>
    <parameter name="perm" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="auth_revokeAuthorization" start="360" end="363" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revokes the user's agreement to the Facebook Terms of Service for your application.  If you call this method for one of your users, you will no longer be able to make API requests on their behalf until they again authorize your application.  Use with care.  Note that if this method is called without a user parameter, then it will revoke access for the current session's user."/>
      <param description="(Optional) User to revoke" type="int" variable="$uid"/>
      <return description="true if revocation succeeds, false otherwise" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="auth_getAppPublicKey" start="372" end="375" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get public key that is needed to verify digital signature an app may pass to other apps. The public key is only used by other apps for verification purposes."/>
      <param description="API key of an app" type="string"/>
      <return description="The public key for the app." type="string"/>
    </docblock>
    <parameter name="target_app_key" byreference="false" type="{unknown}"/>
  </method>
  <method name="auth_getSignedPublicSessionData" start="384" end="387" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a structure that can be passed to another app as proof of session. The other app can verify it using public key of this app."/>
      <return description="public session data structure." type="object">
        <type full="signed" namespace="" name="signed"/>
      </return>
    </docblock>
  </method>
  <method name="connect_getUnconnectedFriendsCount" start="394" end="397" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the number of unconnected friends that exist in this application.">This number is determined based on the accounts registered through
connect.registerUsers() (see below).</description>
    </docblock>
  </method>
  <method name="connect_registerUsers" start="426" end="429" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This method is used to create an association between an external user account and a Facebook user account, as per Facebook Connect.">This method takes an array of account data, including a required email_hash
and optional account data. For each connected account, if the user exists,
the information is added to the set of the user's connected accounts.
If the user has already authorized the site, the connected account is added
in the confirmed state. If the user has not yet authorized the site, the
connected account is added in the pending state.

This is designed to help Facebook Connect recognize when two Facebook
friends are both members of a external site, but perhaps are not aware of
it.  The Connect dialog (see fb:connect-form) is used when friends can be
identified through these email hashes. See the following url for details:

  http://wiki.developers.facebook.com/index.php/Connect.registerUsers</description>
      <param description="A (JSON-encoded) array of arrays, where each array" type="mixed" variable="$accounts">has three properties:
                       'email_hash'  (req) - public email hash of account
                       'account_id'  (opt) - remote account id;
                       'account_url' (opt) - url to remote account;</param>
      <return description="The list of email hashes for the successfully registered" type="array">accounts.</return>
    </docblock>
    <parameter name="accounts" byreference="false" type="{unknown}"/>
  </method>
  <method name="connect_unregisterUsers" start="440" end="443" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unregisters a set of accounts registered using connect.registerUsers."/>
      <param description="The (JSON-encoded) list of email hashes to be" type="array" variable="$email_hashes">unregistered.</param>
      <return description="The list of email hashes which have been successfully" type="array">unregistered.</return>
    </docblock>
    <parameter name="email_hashes" byreference="false" type="{unknown}"/>
  </method>
  <method name="events_get" start="467" end="478" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns events according to the filters specified."/>
      <param description="(Optional) User associated with events. A null" type="int" variable="$uid">parameter will default to the session user.</param>
      <param description="(Optional) Filter by these event" type="object" variable="$eids">ids. A null parameter will get all events for
                           the user. (A csv list will work but is deprecated)<type full="array/string" namespace="" name="array/string"/></param>
      <param description="(Optional) Filter with this unix time as lower" type="int" variable="$start_time">bound.  A null or zero parameter indicates no
                           lower bound.</param>
      <param description="(Optional) Filter with this UTC as upper bound." type="int" variable="$end_time">A null or zero parameter indicates no upper
                           bound.</param>
      <param description="(Optional) Only show events where the given uid" type="string" variable="$rsvp_status">has this rsvp status.  This only works if you
                           have specified a value for $uid.  Values are as
                           in events.getMembers.  Null indicates to ignore
                           rsvp status when filtering.</param>
      <return description="The events matching the query." type="array"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="eids" byreference="false" type="{unknown}" default="null"/>
    <parameter name="start_time" byreference="false" type="{unknown}" default="null"/>
    <parameter name="end_time" byreference="false" type="{unknown}" default="null"/>
    <parameter name="rsvp_status" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="events_getMembers" start="488" end="491" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns membership list data associated with an event."/>
      <param description="event id" type="int" variable="$eid"/>
      <return description="An assoc array of four membership lists, with keys" type="array">'attending', 'unsure', 'declined', and 'not_replied'</return>
    </docblock>
    <parameter name="eid" byreference="false" type="{unknown}"/>
  </method>
  <method name="events_rsvp" start="501" end="506" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="RSVPs the current user to this event."/>
      <param description="event id" type="int" variable="$eid"/>
      <param description="'attending', 'unsure', or 'declined'" type="string" variable="$rsvp_status"/>
      <return description="true if successful" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="eid" byreference="false" type="{unknown}"/>
    <parameter name="rsvp_status" byreference="false" type="{unknown}"/>
  </method>
  <method name="events_cancel" start="517" end="521" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Cancels an event. Only works for events where application is the admin."/>
      <param description="event id" type="int" variable="$eid"/>
      <param description="(Optional) message to send to members of" type="string" variable="$cancel_message">the event about why it is cancelled</param>
      <return description="true if successful" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="eid" byreference="false" type="{unknown}"/>
    <parameter name="cancel_message" byreference="false" type="string" default="''"/>
  </method>
  <method name="events_create" start="532" end="542" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates an event on behalf of the user is there is a session, otherwise on behalf of app.  Successful creation guarantees app will be admin."/>
      <param description="array $event_info  json encoded event information" type="object">
        <type full="assoc" namespace="" name="assoc"/>
      </param>
      <param description="(Optional) filename of picture to set" type="string" variable="$file"/>
      <return description="event id" type="int"/>
    </docblock>
    <parameter name="event_info" byreference="false" type="{unknown}"/>
    <parameter name="file" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="events_invite" start="558" end="563" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Invites users to an event. If a session user exists, the session user must have permissions to invite friends to the event and $uids must contain a list of friend ids. Otherwise, the event must have been created by the app and $uids must contain users of the app.">This method requires the 'create_event' extended permission to
invite people on behalf of a user.</description>
      <param description="event id" variable="$eid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="array of users to invite" variable="$uids" type="object">
        <type full="an" namespace="" name="an"/>
      </param>
      <param description="string containing the user's message" variable="$personal_message" type="object">(text only)<type full="a" namespace="" name="a"/></param>
    </docblock>
    <parameter name="eid" byreference="false" type="{unknown}"/>
    <parameter name="uids" byreference="false" type="{unknown}"/>
    <parameter name="personal_message" byreference="false" type="{unknown}"/>
  </method>
  <method name="events_edit" start="574" end="585" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Edits an existing event. Only works for events where application is admin."/>
      <param description="event id" type="int" variable="$eid"/>
      <param description="array $event_info  json encoded event information" type="object">
        <type full="assoc" namespace="" name="assoc"/>
      </param>
      <param description="(Optional) filename of new picture to set" type="string" variable="$file"/>
      <return description="true if successful" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="eid" byreference="false" type="{unknown}"/>
    <parameter name="event_info" byreference="false" type="{unknown}"/>
    <parameter name="file" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="fbml_refreshImgSrc" start="596" end="599" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetches and re-caches the image stored at the given URL, for use in images published to non-canvas pages via the API (for example, to user profiles via profile.setFBML, or to News Feed via feed.publishUserAction)."/>
      <param description="The absolute URL from which to refresh the image." type="string" variable="$url"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="url" byreference="false" type="{unknown}"/>
  </method>
  <method name="fbml_refreshRefUrl" start="610" end="613" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fetches and re-caches the content stored at the given URL, for use in an fb:ref FBML tag."/>
      <param description="The absolute URL from which to fetch content. This URL" type="string" variable="$url">should be used in a fb:ref FBML tag.</param>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="url" byreference="false" type="{unknown}"/>
  </method>
  <method name="fbml_setRefHandle" start="627" end="630" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Associates a given &quot;handle&quot; with FBML markup so that the handle can be used within the fb:ref FBML tag. A handle is unique within an application and allows an application to publish identical FBML to many user profiles and do subsequent updates without having to republish FBML on behalf of each user."/>
      <param description="The handle to associate with the given FBML." type="string" variable="$handle"/>
      <param description="The FBML to associate with the given handle." type="string" variable="$fbml"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="handle" byreference="false" type="{unknown}"/>
    <parameter name="fbml" byreference="false" type="{unknown}"/>
  </method>
  <method name="fbml_registerCustomTags" start="652" end="656" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register custom tags for the application. Custom tags can be used to extend the set of tags available to applications in FBML markup.">Before you call this function,
make sure you read the full documentation at

http://wiki.developers.facebook.com/index.php/Fbml.RegisterCustomTags

IMPORTANT: This function overwrites the values of
existing tags if the names match. Use this function with care because
it may break the FBML of any application that is using the
existing version of the tags.</description>
      <param description="an array of tag objects (the full description is on the" type="mixed" variable="$tags">wiki page)</param>
      <return description="the number of tags that were registered" type="int"/>
    </docblock>
    <parameter name="tags" byreference="false" type="{unknown}"/>
  </method>
  <method name="fbml_getCustomTags" start="670" end="673" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the custom tags for an application. If $app_id is not specified, the calling app's tags are returned.">If $app_id is different from the id of the calling app,
only the app's public tags are returned.
The return value is an array of the same type as
the $tags parameter of fbml_registerCustomTags().</description>
      <param description="the application's id (optional)" type="int" variable="$app_id"/>
      <return description="an array containing the custom tag  objects" type="mixed"/>
    </docblock>
    <parameter name="app_id" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="fbml_deleteCustomTags" start="688" end="691" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete custom tags the application has registered. If $tag_names is null, all the application's custom tags will be deleted.">IMPORTANT: If your application has registered public tags
that other applications may be using, don't delete those tags!
Doing so can break the FBML ofapplications that are using them.</description>
      <param description="the names of the tags to delete (optinal)" type="array" variable="$tag_names"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="tag_names" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="intl_getTranslations" start="712" end="716" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the best translations for native strings submitted by an application for translation. If $locale is not specified, only native strings and their descriptions are returned. If $all is true, then unapproved translations are returned as well, otherwise only approved translations are returned.">A mapping of locale codes -&gt; language names is available at
http://wiki.developers.facebook.com/index.php/Facebook_Locales</description>
      <param description="the locale to get translations for, or 'all' for all" type="string" variable="$locale">locales, or 'en_US' for native strings</param>
      <param description="whether to return all or only approved translations" type="object" variable="$all">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return description="(locale, array(native_strings, array('best translation" type="array">available given enough votes or manual approval', approval
                                                                 status)))</return>
      <error value="API_EC_PARAM"/>
      <error value="API_EC_PARAM_BAD_LOCALE"/>
    </docblock>
    <parameter name="locale" byreference="false" type="string" default="'en_US'"/>
    <parameter name="all" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="intl_uploadNativeStrings" start="727" end="730" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Lets you insert text strings in their native language into the Facebook Translations database so they can be translated."/>
      <param description="An array of maps, where each map has a 'text'" type="array" variable="$native_strings">field and a 'description' field.</param>
      <return description="Number of strings uploaded." type="int"/>
    </docblock>
    <parameter name="native_strings" byreference="false" type="{unknown}"/>
  </method>
  <method name="feed_publishTemplatizedAction" start="742" end="773" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This method is deprecated for calls made on behalf of users. This method works only for publishing stories on a Facebook Page that has installed your application. To publish stories to a user's profile, use feed.publishUserAction instead.">For more details on this call, please visit the wiki page:

http://wiki.developers.facebook.com/index.php/Feed.publishTemplatizedAction</description>
    </docblock>
    <parameter name="title_template" byreference="false" type="{unknown}"/>
    <parameter name="title_data" byreference="false" type="{unknown}"/>
    <parameter name="body_template" byreference="false" type="{unknown}"/>
    <parameter name="body_data" byreference="false" type="{unknown}"/>
    <parameter name="body_general" byreference="false" type="{unknown}"/>
    <parameter name="image_1" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_1_link" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_2" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_2_link" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_3" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_3_link" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_4" byreference="false" type="{unknown}" default="null"/>
    <parameter name="image_4_link" byreference="false" type="{unknown}" default="null"/>
    <parameter name="target_ids" byreference="false" type="string" default="''"/>
    <parameter name="page_actor_id" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="feed_registerTemplateBundle" start="783" end="807" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers a template bundle.  Template bundles are somewhat involved, so it's recommended you check out the wiki for more details:">http://wiki.developers.facebook.com/index.php/Feed.registerTemplateBundle</description>
      <return description="A template bundle id" type="string"/>
    </docblock>
    <parameter name="one_line_story_templates" byreference="false" type="{unknown}"/>
    <parameter name="short_story_templates" byreference="false" type="array"/>
    <parameter name="full_story_template" byreference="false" type="{unknown}" default="null"/>
    <parameter name="action_links" byreference="false" type="array"/>
  </method>
  <method name="feed_getRegisteredTemplateBundles" start="815" end="818" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves the full list of active template bundles registered by the requesting application."/>
      <return description="An array of template bundles" type="array"/>
    </docblock>
  </method>
  <method name="feed_getRegisteredTemplateBundleByID" start="828" end="831" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves information about a specified template bundle previously registered by the requesting application."/>
      <param description="The template bundle id" type="string" variable="$template_bundle_id"/>
      <return description="Template bundle" type="array"/>
    </docblock>
    <parameter name="template_bundle_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="feed_deactivateTemplateBundleByID" start="840" end="843" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deactivates a previously registered template bundle."/>
      <param description="The template bundle id" type="string" variable="$template_bundle_id"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="template_bundle_id" byreference="false" type="{unknown}"/>
  </method>
  <constant name="STORY_SIZE_ONE_LINE" value="1"/>
  <constant name="STORY_SIZE_SHORT" value="2"/>
  <constant name="STORY_SIZE_FULL" value="4"/>
  <method name="feed_publishUserAction" start="871" end="892" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Publishes a story on behalf of the user owning the session, using the specified template bundle. This method requires an active session key in order to be called.">The parameters to this method ($templata_data in particular) are somewhat
involved.  It's recommended you visit the wiki for details:

 http://wiki.developers.facebook.com/index.php/Feed.publishUserAction</description>
      <param description="A template bundle id previously registered" type="int" variable="$template_bundle_id"/>
      <param description="See wiki article for syntax" type="array" variable="$template_data"/>
      <param description="(Optional) An array of friend uids of the" type="array" variable="$target_ids">user who shared in this action.</param>
      <param description="(Optional) Additional markup that extends" type="string" variable="$body_general">the body of a short story.</param>
      <param description="(Optional) A story size (see above)" type="int" variable="$story_size"/>
      <param description="(Optional) A user message for a short" type="string" variable="$user_message">story.</param>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="template_bundle_id" byreference="false" type="{unknown}"/>
    <parameter name="template_data" byreference="false" type="{unknown}"/>
    <parameter name="target_ids" byreference="false" type="string" default="''"/>
    <parameter name="body_general" byreference="false" type="string" default="''"/>
    <parameter name="story_size" byreference="false" type="{unknown}" default="FacebookRestClient::STORY_SIZE_ONE_LINE"/>
    <parameter name="user_message" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="allow client to either pass in JSON or an assoc that we JSON for them" line="878"/>
    </inline>
  </method>
  <method name="stream_publish" start="906" end="917" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Publish a post to the user's stream."/>
      <param description="user's message" variable="$message" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="post's attachment (optional)" variable="$attachment" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="the post's action links (optional)" variable="$action" type="object">
        <type full="links" namespace="" name="links"/>
      </param>
      <param description="user on whose wall the post will be posted" variable="$target_id" type="object">(optional)<type full="the" namespace="" name="the"/></param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return description="the post id" type="string"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="attachment" byreference="false" type="{unknown}" default="null"/>
    <parameter name="action_links" byreference="false" type="{unknown}" default="null"/>
    <parameter name="target_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_remove" start="927" end="932" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a post from the user's stream.">Currently, you may only remove stories you application created.</description>
      <param description="post id" variable="$post_id" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="post_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_addComment" start="942" end="948" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a comment to a stream post"/>
      <param description="post id" variable="$post_id" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="comment text" variable="$comment" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return description="the id of the created comment" type="string"/>
    </docblock>
    <parameter name="post_id" byreference="false" type="{unknown}"/>
    <parameter name="comment" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_removeComment" start="958" end="963" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a comment from a stream post"/>
      <param description="comment id" variable="$comment_id" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="comment_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_addLike" start="972" end="977" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a like to a stream post"/>
      <param description="post id" variable="$post_id" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="post_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_removeLike" start="986" end="991" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a like from a stream post"/>
      <param description="post id" variable="$post_id" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <param description="actor (defaults to session user)" variable="$uid" type="object">
        <type full="the" namespace="" name="the"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="post_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="feed_getAppFriendStories" start="1000" end="1002" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For the current user, retrieves stories generated by the user's friends while using this application.  This can be used to easily create a &quot;News Feed&quot; like experience."/>
      <return description="An array of feed story objects." type="array"/>
    </docblock>
  </method>
  <method name="fql_query" start="1013" end="1016" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Makes an FQL query.  This is a generalized way of accessing all the data in the API, as an alternative to most of the other method calls.  More info at http://wiki.developers.facebook.com/index.php/FQL"/>
      <param description="the query to evaluate" type="string" variable="$query"/>
      <return description="generalized array representing the results" type="array"/>
    </docblock>
    <parameter name="query" byreference="false" type="{unknown}"/>
  </method>
  <method name="fql_multiquery" start="1028" end="1031" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Makes a set of FQL queries in parallel.  This method takes a dictionary of FQL queries where the keys are names for the queries.  Results from one query can be used within another query to fetch additional data.  More info about FQL queries at http://wiki.developers.facebook.com/index.php/FQL"/>
      <param description="JSON-encoded dictionary of queries to evaluate" type="string" variable="$queries"/>
      <return description="generalized array representing the results" type="array"/>
    </docblock>
    <parameter name="queries" byreference="false" type="{unknown}"/>
  </method>
  <method name="friends_areFriends" start="1049" end="1053" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not pairs of users are friends.">Note that the Facebook friend relationship is symmetric.</description>
      <param description="list of ids (id_1, id_2,...)" type="object" variable="$uids1">of some length X (csv is deprecated)<type full="array/string" namespace="" name="array/string"/></param>
      <param description="list of ids (id_A, id_B,...)" type="object" variable="$uids2">of SAME length X (csv is deprecated)<type full="array/string" namespace="" name="array/string"/></param>
      <return description="An array with uid1, uid2, and bool if friends, e.g.:" type="array">array(0 =&gt; array('uid1' =&gt; id_1, 'uid2' =&gt; id_A, 'are_friends' =&gt; 1),
        1 =&gt; array('uid1' =&gt; id_2, 'uid2' =&gt; id_B, 'are_friends' =&gt; 0)
        ...)</return>
      <error>API_EC_PARAM_USER_ID_LIST</error>
    </docblock>
    <parameter name="uids1" byreference="false" type="{unknown}"/>
    <parameter name="uids2" byreference="false" type="{unknown}"/>
  </method>
  <method name="friends_get" start="1063" end="1079" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the friends of the current session user."/>
      <param description="(Optional) Only return friends on this friend list." type="int" variable="$flid"/>
      <param description="(Optional) Return friends for this user." type="int" variable="$uid"/>
      <return description="An array of friends" type="array"/>
    </docblock>
    <parameter name="flid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="friends_getMutualFriends" start="1092" end="1096" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the mutual friends between the target uid and a source uid or the current session user."/>
      <param description="Target uid for which mutual friends will be found." type="int" variable="$target_uid"/>
      <param description="(optional) Source uid for which mutual friends will" type="int" variable="$source_uid">be found. If no source_uid is specified,
                                  source_id will default to the session
                                  user.</param>
      <return description="An array of friend uids" type="array"/>
    </docblock>
    <parameter name="target_uid" byreference="false" type="{unknown}"/>
    <parameter name="source_uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="friends_getLists" start="1103" end="1105" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the set of friend lists for the current session user."/>
      <return description="An array of friend list objects" type="array"/>
    </docblock>
  </method>
  <method name="friends_getAppUsers" start="1113" end="1115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the friends of the session user, who are also users of the calling application."/>
      <return description="An array of friends also using the app" type="array"/>
    </docblock>
  </method>
  <method name="groups_get" start="1128" end="1132" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns groups according to the filters specified."/>
      <param description="(Optional) User associated with groups.  A null" type="int" variable="$uid">parameter will default to the session user.</param>
      <param description="(Optional) Array of group ids to query. A null" type="object" variable="$gids">parameter will get all groups for the user.
                    (csv is deprecated)<type full="array/string" namespace="" name="array/string"/></param>
      <return description="An array of group objects" type="array"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="gids" byreference="false" type="{unknown}"/>
  </method>
  <method name="groups_getMembers" start="1142" end="1145" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the membership list of a group."/>
      <param description="Group id" type="int" variable="$gid"/>
      <return description="An array with four membership lists, with keys 'members'," type="array">'admins', 'officers', and 'not_replied'</return>
    </docblock>
    <parameter name="gid" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getCookies" start="1156" end="1160" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns cookies according to the filters specified."/>
      <param description="User for which the cookies are needed." type="int" variable="$uid"/>
      <param description="(Optional) A null parameter will get all cookies" type="string" variable="$name">for the user.</param>
      <return description="Cookies!  Nom nom nom nom nom." type="array"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_setCookie" start="1173" end="1180" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets cookies according to the params specified."/>
      <param description="User for which the cookies are needed." type="int" variable="$uid"/>
      <param description="Name of the cookie" type="string" variable="$name"/>
      <param description="(Optional) if expires specified and is in the past" type="string" variable="$value"/>
      <param description="(Optional) Expiry time" type="int" variable="$expires"/>
      <param description="(Optional) Url path to associate with (default is /)" type="string" variable="$path"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="expires" byreference="false" type="{unknown}"/>
    <parameter name="path" byreference="false" type="{unknown}"/>
  </method>
  <method name="links_get" start="1192" end="1197" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves links posted by the given user."/>
      <param description="The user whose links you wish to retrieve" type="int" variable="$uid"/>
      <param description="The maximimum number of links to retrieve" type="int" variable="$limit"/>
      <param description="(Optional) Array of specific link" type="array" variable="$link_ids">IDs to retrieve by this user</param>
      <return description="An array of links." type="array"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="limit" byreference="false" type="{unknown}"/>
    <parameter name="link_ids" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="links_post" start="1209" end="1214" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Posts a link on Facebook."/>
      <param description="URL/link you wish to post" type="string" variable="$url"/>
      <param description="(Optional) A comment about this link" type="string" variable="$comment"/>
      <param description="(Optional) User ID that is posting this link;" type="int" variable="$uid">defaults to current session user</param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="url" byreference="false" type="{unknown}"/>
    <parameter name="comment" byreference="false" type="string" default="''"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="permissions_checkGrantedApiAccess" start="1227" end="1230" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks API-access granted by self to the specified application."/>
      <param description="Other application key" type="string" variable="$permissions_apikey"/>
      <return description="API methods/namespaces which are allowed access" type="array"/>
    </docblock>
    <parameter name="permissions_apikey" byreference="false" type="{unknown}"/>
  </method>
  <method name="permissions_checkAvailableApiAccess" start="1239" end="1242" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks API-access granted to self by the specified application."/>
      <param description="Other application key" type="string" variable="$permissions_apikey"/>
      <return description="API methods/namespaces which are allowed access" type="array"/>
    </docblock>
    <parameter name="permissions_apikey" byreference="false" type="{unknown}"/>
  </method>
  <method name="permissions_grantApiAccess" start="1254" end="1258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Grant API-access to the specified methods/namespaces to the specified application."/>
      <param description="Other application key" type="string" variable="$permissions_apikey"/>
      <param description="(Optional) API methods/namespaces" type="object" variable="$method_arr">allowed<type full="array(string)" namespace="" name="array(string)"/></param>
      <return description="API methods/namespaces which are allowed access" type="array"/>
    </docblock>
    <parameter name="permissions_apikey" byreference="false" type="{unknown}"/>
    <parameter name="method_arr" byreference="false" type="{unknown}"/>
  </method>
  <method name="permissions_revokeApiAccess" start="1267" end="1270" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revoke API-access granted to the specified application."/>
      <param description="Other application key" type="string" variable="$permissions_apikey"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="permissions_apikey" byreference="false" type="{unknown}"/>
  </method>
  <method name="payments_setProperties" start="1282" end="1285" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set Payments properties for an app."/>
      <param description="a map from property names to  values" type="object">
        <type full="properties" namespace="" name="properties"/>
      </param>
      <return description="on success" type="object">
        <type full="true" namespace="" name="true"/>
      </return>
    </docblock>
    <parameter name="properties" byreference="false" type="{unknown}"/>
  </method>
  <method name="payments_getOrderDetails" start="1287" end="1291" abstract="false" final="false" static="false" visibility="public">
    <parameter name="order_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="payments_updateOrder" start="1293" end="1299" abstract="false" final="false" static="false" visibility="public">
    <parameter name="order_id" byreference="false" type="{unknown}"/>
    <parameter name="status" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <method name="payments_getOrders" start="1301" end="1308" abstract="false" final="false" static="false" visibility="public">
    <parameter name="status" byreference="false" type="{unknown}"/>
    <parameter name="start_time" byreference="false" type="{unknown}"/>
    <parameter name="end_time" byreference="false" type="{unknown}"/>
    <parameter name="test_mode" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="gifts_get" start="1319" end="1325" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get Gifts associated with an app"/>
      <return description="of gifts" type="array"/>
    </docblock>
  </method>
  <method name="gifts_update" start="1334" end="1341" abstract="false" final="false" static="false" visibility="public">
    <parameter name="update_array" byreference="false" type="{unknown}"/>
  </method>
  <method name="notes_create" start="1353" end="1358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates a note with the specified title and content."/>
      <param description="Title of the note." type="string" variable="$title"/>
      <param description="Content of the note." type="string" variable="$content"/>
      <param description="(Optional) The user for whom you are creating a" type="int" variable="$uid">note; defaults to current session user</param>
      <return description="The ID of the note that was just created." type="int"/>
    </docblock>
    <parameter name="title" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="notes_delete" start="1369" end="1373" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deletes the specified note."/>
      <param description="ID of the note you wish to delete" type="int" variable="$note_id"/>
      <param description="(Optional) Owner of the note you wish to delete;" type="int" variable="$uid">defaults to current session user</param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="note_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="notes_edit" start="1387" end="1393" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Edits a note, replacing its title and contents with the title and contents specified."/>
      <param description="ID of the note you wish to edit" type="int" variable="$note_id"/>
      <param description="Replacement title for the note" type="string" variable="$title"/>
      <param description="Replacement content for the note" type="string" variable="$content"/>
      <param description="(Optional) Owner of the note you wish to edit;" type="int" variable="$uid">defaults to current session user</param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="note_id" byreference="false" type="{unknown}"/>
    <parameter name="title" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="notes_get" start="1407" end="1411" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves all notes by a user. If note_ids are specified, retrieves only those specific notes by that user."/>
      <param description="User whose notes you wish to retrieve" type="int" variable="$uid"/>
      <param description="(Optional) List of specific note" type="array" variable="$note_ids">IDs by this user to retrieve</param>
      <return description="A list of all of the given user's notes, or an empty list" type="array">if the viewer lacks permissions or if there are no visible
              notes.</return>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="note_ids" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="notifications_get" start="1422" end="1424" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the outstanding notifications for the session user."/>
      <return description="An assoc array of notification count objects for" type="array">'messages', 'pokes' and 'shares', a uid list of
              'friend_requests', a gid list of 'group_invites',
              and an eid list of 'event_invites'</return>
    </docblock>
  </method>
  <method name="notifications_send" start="1433" end="1438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sends a notification to the specified users."/>
      <return description="comma separated list of successful recipients" type="object">
        <type full="A" namespace="" name="A"/>
      </return>
      <error>API_EC_PARAM_USER_ID_LIST</error>
    </docblock>
    <parameter name="to_ids" byreference="false" type="{unknown}"/>
    <parameter name="notification" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}"/>
  </method>
  <method name="notifications_sendEmail" start="1452" end="1461" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sends an email to the specified user of the application."/>
      <param description="array of ids of the recipients (csv is deprecated)" type="object" variable="$recipients">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <param description="subject of the email" type="string" variable="$subject"/>
      <param description="(plain text) body of the email" type="string" variable="$text"/>
      <param description="fbml markup for an html version of the email" type="string" variable="$fbml"/>
      <return description="A comma separated list of successful recipients" type="string"/>
      <error>API_EC_PARAM_USER_ID_LIST</error>
    </docblock>
    <parameter name="recipients" byreference="false" type="{unknown}"/>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <parameter name="text" byreference="false" type="{unknown}"/>
    <parameter name="fbml" byreference="false" type="{unknown}"/>
  </method>
  <method name="pages_getInfo" start="1475" end="1481" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the requested info fields for the requested set of pages."/>
      <param description="an array of page ids (csv is deprecated)" type="object" variable="$page_ids">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <param description="an array of strings describing the" type="object" variable="$fields">info fields desired (csv is deprecated)<type full="array/string" namespace="" name="array/string"/></param>
      <param description="(Optional) limit results to pages of which this" type="int" variable="$uid">user is a fan.</param>
      <param description="type limits results to a particular type of page." type="string"/>
      <return description="An array of pages" type="array"/>
    </docblock>
    <parameter name="page_ids" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}"/>
  </method>
  <method name="pages_isAdmin" start="1491" end="1495" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the given user is an admin for the passed page."/>
      <param description="target page id" type="int" variable="$page_id"/>
      <param description="(Optional) user id (defaults to the logged-in user)" type="int" variable="$uid"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="page_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="pages_isAppAdded" start="1504" end="1507" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the given page has added the application."/>
      <param description="target page id" type="int" variable="$page_id"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="page_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="pages_isFan" start="1517" end="1521" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if logged in user is a fan for the passed page."/>
      <param description="target page id" type="int" variable="$page_id"/>
      <param description="user to compare.  If empty, the logged in user." type="int" variable="$uid"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="page_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="photos_addTag" start="1550" end="1565" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a tag with the given information to a photo. See the wiki for details:">http://wiki.developers.facebook.com/index.php/Photos.addTag</description>
      <param description="The ID of the photo to be tagged" type="int" variable="$pid"/>
      <param description="The ID of the user being tagged. You must specify" type="int" variable="$tag_uid">either the $tag_uid or the $tag_text parameter
                         (unless $tags is specified).</param>
      <param description="Some text identifying the person being tagged." type="string" variable="$tag_text">You must specify either the $tag_uid or $tag_text
                         parameter (unless $tags is specified).</param>
      <param description="The horizontal position of the tag, as a" type="float" variable="$x">percentage from 0 to 100, from the left of the
                         photo.</param>
      <param description="The vertical position of the tag, as a percentage" type="float" variable="$y">from 0 to 100, from the top of the photo.</param>
      <param description="(Optional) An array of maps, where each map" type="array" variable="$tags">can contain the tag_uid, tag_text, x, and y
                         parameters defined above.  If specified, the
                         individual arguments are ignored.</param>
      <param description="(Optional)  The user ID of the user whose photo" type="int" variable="$owner_uid">you are tagging. If this parameter is not
                         specified, then it defaults to the session user.</param>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="pid" byreference="false" type="{unknown}"/>
    <parameter name="tag_uid" byreference="false" type="{unknown}"/>
    <parameter name="tag_text" byreference="false" type="{unknown}"/>
    <parameter name="x" byreference="false" type="{unknown}"/>
    <parameter name="y" byreference="false" type="{unknown}"/>
    <parameter name="tags" byreference="false" type="{unknown}"/>
    <parameter name="owner_uid" byreference="false" type="integer" default="0"/>
  </method>
  <method name="photos_createAlbum" start="1582" end="1593" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates and returns a new album owned by the specified user or the current session user."/>
      <param description="The name of the album." type="string" variable="$name"/>
      <param description="(Optional) A description of the album." type="string" variable="$description"/>
      <param description="(Optional) A description of the location." type="string" variable="$location"/>
      <param description="(Optional) A privacy setting for the album." type="string" variable="$visible">One of 'friends', 'friends-of-friends',
                            'networks', or 'everyone'.  Default 'everyone'.</param>
      <param description="(Optional) User id for creating the album; if" type="int" variable="$uid">not specified, the session user is used.</param>
      <return description="An album object" type="array"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="string" default="''"/>
    <parameter name="location" byreference="false" type="string" default="''"/>
    <parameter name="visible" byreference="false" type="string" default="''"/>
    <parameter name="uid" byreference="false" type="integer" default="0"/>
  </method>
  <method name="photos_get" start="1609" end="1612" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns photos according to the filters specified."/>
      <param description="(Optional) Filter by uid of user tagged in the photos." type="int" variable="$subj_id"/>
      <param description="(Optional) Filter by an album, as returned by" type="int" variable="$aid">photos_getAlbums.</param>
      <param description="(Optional) Restrict to an array of pids" type="object" variable="$pids">(csv is deprecated)

Note that at least one of these parameters needs to be specified, or an
error is returned.<type full="array/string" namespace="" name="array/string"/></param>
      <return description="An array of photo objects." type="array"/>
    </docblock>
    <parameter name="subj_id" byreference="false" type="{unknown}"/>
    <parameter name="aid" byreference="false" type="{unknown}"/>
    <parameter name="pids" byreference="false" type="{unknown}"/>
  </method>
  <method name="photos_getAlbums" start="1626" end="1630" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the albums created by the given user."/>
      <param description="(Optional) The uid of the user whose albums you want." type="int" variable="$uid">A null will return the albums of the session user.</param>
      <param description="(Optional) An array of aids to restrict" type="string" variable="$aids">the query. (csv is deprecated)

Note that at least one of the (uid, aids) parameters must be specified.</param>
      <returns value="an array of album objects."/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}"/>
    <parameter name="aids" byreference="false" type="{unknown}"/>
  </method>
  <method name="photos_getTags" start="1641" end="1644" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the tags on all photos specified."/>
      <param description="A list of pids to query" type="string" variable="$pids"/>
      <return description="An array of photo tag objects, which include pid," type="array">subject uid, and two floating-point numbers (xcoord, ycoord)
               for tag pixel location.</return>
    </docblock>
    <parameter name="pids" byreference="false" type="{unknown}"/>
  </method>
  <method name="photos_upload" start="1658" end="1664" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Uploads a photo."/>
      <param description="The location of the photo on the local filesystem." type="string" variable="$file"/>
      <param description="(Optional) The album into which to upload the" type="int" variable="$aid">photo.</param>
      <param description="(Optional) A caption for the photo." type="string" variable="$caption"/>
      <param description="uid (Optional) The user ID of the user whose photo you" type="int">are uploading</param>
      <return description="An array of user objects" type="array"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="aid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="caption" byreference="false" type="{unknown}" default="null"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="video_upload" start="1676" end="1682" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Uploads a video."/>
      <param description="The location of the video on the local filesystem." type="string" variable="$file"/>
      <param description="(Optional) A title for the video. Titles over 65 characters in length will be truncated." type="string" variable="$title"/>
      <param description="(Optional) A description for the video." type="string" variable="$description"/>
      <return description="An array with the video's ID, title, description, and a link to view it on Facebook." type="array"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="title" byreference="false" type="{unknown}" default="null"/>
    <parameter name="description" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="video_getUploadLimits" start="1691" end="1693" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array with the video limitations imposed on the current session's associated user. Maximum length is measured in seconds; maximum size is measured in bytes."/>
      <return description="Array with &quot;length&quot; and &quot;size&quot; keys" type="array"/>
    </docblock>
  </method>
  <method name="users_getInfo" start="1703" end="1707" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the requested info fields for the requested set of users."/>
      <param description="An array of user ids (csv is deprecated)" type="object" variable="$uids">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <param description="An array of info field names desired (csv is deprecated)" type="object" variable="$fields">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <return description="An array of user objects" type="array"/>
    </docblock>
    <parameter name="uids" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="{unknown}"/>
  </method>
  <method name="users_getStandardInfo" start="1724" end="1728" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the requested info fields for the requested set of users. A session key must not be specified. Only data about users that have authorized your application will be returned.">Check the wiki for fields that can be queried through this API call.
Data returned from here should not be used for rendering to application
users, use users.getInfo instead, so that proper privacy rules will be
applied.</description>
      <param description="An array of user ids (csv is deprecated)" type="object" variable="$uids">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <param description="An array of info field names desired (csv is deprecated)" type="object" variable="$fields">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <return description="An array of user objects" type="array"/>
    </docblock>
    <parameter name="uids" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="{unknown}"/>
  </method>
  <method name="users_getLoggedInUser" start="1735" end="1737" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the user corresponding to the current session object."/>
      <return description="User id" type="integer"/>
    </docblock>
  </method>
  <method name="users_hasAppPermission" start="1745" end="1748" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns 1 if the user has the specified permission, 0 otherwise.">http://wiki.developers.facebook.com/index.php/Users.hasAppPermission</description>
      <return description="1 or 0" type="integer"/>
    </docblock>
    <parameter name="ext_perm" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="users_isAppUser" start="1756" end="1762" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the user corresponding to the current session object has the give the app basic authorization."/>
      <return description="true if the user has authorized the app" type="boolean"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="users_isVerified" start="1771" end="1773" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether or not the user corresponding to the current session object is verified by Facebook. See the documentation for Users.isVerified for details."/>
      <return description="true if the user is verified" type="boolean"/>
    </docblock>
  </method>
  <method name="users_setStatus" start="1792" end="1803" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the users' current status message. Message does NOT contain the word &quot;is&quot; , so make sure to include a verb.">Example: setStatus("is loving the API!")
will produce the status "Luke is loving the API!"</description>
      <param description="text-only message to set" type="string" variable="$status"/>
      <param description="user to set for (defaults to the" type="int" variable="$uid">logged-in user)</param>
      <param description="whether or not to clear the status," type="object" variable="$clear">instead of setting it<type full="bool" namespace="" name="bool"/></param>
      <param description="if true, the word &quot;is&quot; will *not* be" type="object" variable="$status_includes_verb">prepended to the status message<type full="bool" namespace="" name="bool"/></param>
      <return type="boolean"/>
    </docblock>
    <parameter name="status" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="clear" byreference="false" type="{unknown}" default="false"/>
    <parameter name="status_includes_verb" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="comments_get" start="1813" end="1816" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the comments for a particular xid. This is essentially a wrapper around the comment FQL table."/>
      <param description="external id associated with the comments" type="string" variable="$xid"/>
      <return description="of comment objects" type="array"/>
    </docblock>
    <parameter name="xid" byreference="false" type="{unknown}"/>
  </method>
  <method name="comments_add" start="1833" end="1844" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a comment to a particular xid on behalf of a user. If called without an app_secret (with session secret), this will only work for the session user."/>
      <param description="external id associated with the comments" type="string" variable="$xid"/>
      <param description="text of the comment" type="string" variable="$text"/>
      <param description="user adding the comment (def: session user)" type="int" variable="$uid"/>
      <param description="optional title for the stream story" type="string" variable="$title"/>
      <param description="optional url for the stream story" type="string" variable="$url"/>
      <param description="publish a feed story about this comment?" type="object" variable="$publish_to_stream">a link will be generated to title/url in the story<type full="bool" namespace="" name="bool"/></param>
      <return description="comment_id associated with the comment" type="string"/>
    </docblock>
    <parameter name="xid" byreference="false" type="{unknown}"/>
    <parameter name="text" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="integer" default="0"/>
    <parameter name="title" byreference="false" type="string" default="''"/>
    <parameter name="url" byreference="false" type="string" default="''"/>
    <parameter name="publish_to_stream" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="comments_remove" start="1855" end="1860" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a particular comment."/>
      <param description="the external id associated with the comments" type="string" variable="$xid"/>
      <param description="id of the comment to remove (returned by" type="string" variable="$comment_id">comments.add and comments.get)</param>
      <return type="boolean"/>
    </docblock>
    <parameter name="xid" byreference="false" type="{unknown}"/>
    <parameter name="comment_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="stream_get" start="1885" end="1905" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the stream on behalf of a user using a set of users. This call will return the latest $limit queries between $start_time and $end_time."/>
      <param description="user making the call (def: session)" type="int" variable="$viewer_id"/>
      <param description="users/pages to look at (def: all connections)" type="array" variable="$source_ids"/>
      <param description="start time to look for stories (def: 1 day ago)" type="int" variable="$start_time"/>
      <param description="end time to look for stories (def: now)" type="int" variable="$end_time"/>
      <param description="number of stories to attempt to fetch (def: 30)" type="int" variable="$limit"/>
      <param description="key returned by stream.getFilters to fetch" type="string" variable="$filter_key"/>
      <param description="metadata to include with the return, allows" type="array" variable="$metadata">requested metadata to be returned, such as
                          profiles, albums, photo_tags</param>
      <return type="object">'posts'      =&gt; array of posts,
          // if requested, the following data may be returned
          'profiles'   =&gt; array of profile metadata of users/pages in posts
          'albums'     =&gt; array of album metadata in posts
          'photo_tags' =&gt; array of photo_tags for photos in posts
        )<type full="array(" namespace="" name="array("/></return>
    </docblock>
    <parameter name="viewer_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="source_ids" byreference="false" type="{unknown}" default="null"/>
    <parameter name="start_time" byreference="false" type="integer" default="0"/>
    <parameter name="end_time" byreference="false" type="integer" default="0"/>
    <parameter name="limit" byreference="false" type="integer" default="30"/>
    <parameter name="filter_key" byreference="false" type="string" default="''"/>
    <parameter name="exportable_only" byreference="false" type="{unknown}" default="false"/>
    <parameter name="metadata" byreference="false" type="{unknown}" default="null"/>
    <parameter name="post_ids" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_getFilters" start="1917" end="1920" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the filters (with relevant filter keys for stream.get) for a particular user. These filters are typical things like news feed, friend lists, networks. They can be used to filter the stream without complex queries to determine which ids belong in which groups."/>
      <param description="user to get filters for" type="int" variable="$uid"/>
      <return description="of stream filter objects" type="array"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stream_getComments" start="1931" end="1934" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the full comments given a post_id from stream.get or the stream FQL table. Initially, only a set of preview comments are returned because some posts can have many comments."/>
      <param description="id of the post to get comments for" type="string" variable="$post_id"/>
      <return description="of comment objects" type="array"/>
    </docblock>
    <parameter name="post_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="profile_setFBML" start="1950" end="1963" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the FBML for the profile of the user attached to this session."/>
      <param description="The FBML that describes the profile" type="string" variable="$markup">presence of this app for the user</param>
      <param description="The user" type="int" variable="$uid"/>
      <param description="Profile FBML" type="string" variable="$profile"/>
      <param description="Profile action FBML (deprecated)" type="string" variable="$profile_action"/>
      <param description="Mobile profile FBML" type="string" variable="$mobile_profile"/>
      <param description="Main Tab profile FBML" type="string" variable="$profile_main"/>
      <return description="A list of strings describing any compile errors for the" type="array">submitted FBML</return>
    </docblock>
    <parameter name="markup" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="profile" byreference="false" type="string" default="''"/>
    <parameter name="profile_action" byreference="false" type="string" default="''"/>
    <parameter name="mobile_profile" byreference="false" type="string" default="''"/>
    <parameter name="profile_main" byreference="false" type="string" default="''"/>
  </method>
  <method name="profile_getFBML" start="1975" end="1979" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the FBML for the profile box that is currently set for a user's profile (your application set the FBML previously by calling the profile.setFBML method)."/>
      <param description="(Optional) User id to lookup; defaults to session." type="int" variable="$uid"/>
      <param description="(Optional) 1 for original style, 2 for profile_main boxes" type="int" variable="$type"/>
      <return description="The FBML" type="string"/>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
    <parameter name="type" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="profile_getInfo" start="1993" end="1996" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the specified user's application info section for the calling application. These info sections have either been set via a previous profile.setInfo call or by the user editing them directly."/>
      <param description="(Optional) User id to lookup; defaults to session." type="int" variable="$uid"/>
      <return description="Info fields for the current user.  See wiki for structure:" type="array">http://wiki.developers.facebook.com/index.php/Profile.getInfo</return>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="profile_getInfoOptions" start="2006" end="2009" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the options associated with the specified info field for an application info section."/>
      <param description="The title of the field" type="string" variable="$field"/>
      <return description="An array of info options." type="array"/>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
  </method>
  <method name="profile_setInfo" start="2025" end="2031" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Configures an application info section that the specified user can install on the Info tab of her profile.  For details on the structure of an info field, please see:">http://wiki.developers.facebook.com/index.php/Profile.setInfo</description>
      <param description="Title / header of the info section" type="string" variable="$title"/>
      <param description="1 for text-only, 5 for thumbnail views" type="int" variable="$type"/>
      <param description="An array of info fields. See wiki for details." type="array" variable="$info_fields"/>
      <param description="(Optional)" type="int" variable="$uid"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="title" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="info_fields" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="profile_setInfoOptions" start="2044" end="2048" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Specifies the objects for a field for an application info section. These options populate the typeahead for a thumbnail."/>
      <param description="The title of the field" type="string" variable="$field"/>
      <param description="An array of items for a thumbnail, including" type="array" variable="$options">'label', 'link', and optionally 'image',
                       'description' and 'sublabel'</param>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_setUserPreference" start="2066" end="2071" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a user preference."/>
      <param description="preference identifier (0-200)" type="object">
        <type full="pref_id" namespace="" name="pref_id"/>
      </param>
      <param description="preferece's value" type="object">
        <type full="value" namespace="" name="value"/>
      </param>
      <param description="the user id (defaults to current session user)" type="object">
        <type full="uid" namespace="" name="uid"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR
   API_EC_PERMISSION_OTHER_USER</error>
    </docblock>
    <parameter name="pref_id" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_setUserPreferences" start="2087" end="2094" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a user's all preferences for this application."/>
      <param description="preferece values in an associative arrays" type="object">
        <type full="values" namespace="" name="values"/>
      </param>
      <param description="whether to replace all existing preferences or" type="object">merge into them.<type full="replace" namespace="" name="replace"/></param>
      <param description="the user id (defaults to current session user)" type="object">
        <type full="uid" namespace="" name="uid"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR
   API_EC_PERMISSION_OTHER_USER</error>
    </docblock>
    <parameter name="values" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_getUserPreference" start="2109" end="2113" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a user preference."/>
      <param description="preference identifier (0-200)" type="object">
        <type full="pref_id" namespace="" name="pref_id"/>
      </param>
      <param description="the user id (defaults to current session user)" type="object">
        <type full="uid" namespace="" name="uid"/>
      </param>
      <return description="value" type="object">
        <type full="preference's" namespace="" name="preference's"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR
   API_EC_PERMISSION_OTHER_USER</error>
    </docblock>
    <parameter name="pref_id" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_getUserPreferences" start="2126" end="2129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a user preference."/>
      <param description="the user id (defaults to current session user)" type="object">
        <type full="uid" namespace="" name="uid"/>
      </param>
      <return description="values" type="object">
        <type full="preference" namespace="" name="preference"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR
   API_EC_PERMISSION_OTHER_USER</error>
    </docblock>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_createObjectType" start="2144" end="2147" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new object type."/>
      <param description="object type's name" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_dropObjectType" start="2162" end="2165" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_renameObjectType" start="2182" end="2186" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rename an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="new object type's name" type="object">
        <type full="new_name" namespace="" name="new_name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="new_name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_defineObjectProperty" start="2203" end="2210" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a new property to an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="name of the property to add" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <param description="1: integer; 2: string; 3: text blob" type="object">
        <type full="prop_type" namespace="" name="prop_type"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
    <parameter name="prop_type" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_undefineObjectProperty" start="2226" end="2230" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a previously defined property from an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="name of the property to remove" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_renameObjectProperty" start="2248" end="2254" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rename a previously defined property of an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="name of the property to rename" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <param description="new name to use" type="object">
        <type full="new_name" namespace="" name="new_name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
    <parameter name="new_name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getObjectTypes" start="2266" end="2268" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve a list of all object types that have defined for the application."/>
      <return description="list of object type names" type="object">
        <type full="a" namespace="" name="a"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
  </method>
  <method name="data_getObjectType" start="2283" end="2286" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get definitions of all properties of an object type."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <return description="of property name and property types" type="object">
        <type full="pairs" namespace="" name="pairs"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_createObject" start="2302" end="2306" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new object."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="(optional) properties to set initially" type="object">
        <type full="properties" namespace="" name="properties"/>
      </param>
      <return description="created object's id" type="object">
        <type full="newly" namespace="" name="newly"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="properties" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_updateObject" start="2324" end="2329" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update an existing object."/>
      <param description="object's id" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <param description="new properties" type="object">
        <type full="properties" namespace="" name="properties"/>
      </param>
      <param description="true for replacing existing properties;" type="object">false for merging<type full="replace" namespace="" name="replace"/></param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
    <parameter name="properties" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="data_deleteObject" start="2344" end="2347" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete an existing object."/>
      <param description="object's id" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_deleteObjects" start="2361" end="2364" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Delete a list of objects."/>
      <param description="objects to delete" type="object">
        <type full="obj_ids" namespace="" name="obj_ids"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_ids" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getObjectProperty" start="2381" end="2385" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a single property value of an object."/>
      <param description="object's id" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <param description="individual property's name" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <return description="property's value" type="object">
        <type full="individual" namespace="" name="individual"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getObject" start="2402" end="2406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get properties of an object."/>
      <param description="object's id" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <param description="(optional) properties to return; null for all." type="object">
        <type full="prop_names" namespace="" name="prop_names"/>
      </param>
      <return description="properties of an object" type="object">
        <type full="specified" namespace="" name="specified"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
    <parameter name="prop_names" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_getObjects" start="2423" end="2427" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get properties of a list of objects."/>
      <param description="object ids" type="object">
        <type full="obj_ids" namespace="" name="obj_ids"/>
      </param>
      <param description="(optional) properties to return; null for all." type="object">
        <type full="prop_names" namespace="" name="prop_names"/>
      </param>
      <return description="properties of an object" type="object">
        <type full="specified" namespace="" name="specified"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_ids" byreference="false" type="{unknown}"/>
    <parameter name="prop_names" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_setObjectProperty" start="2444" end="2450" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a single property value of an object."/>
      <param description="object's id" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <param description="individual property's name" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <param description="new value to set" type="object">
        <type full="prop_value" namespace="" name="prop_value"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
    <parameter name="prop_value" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getHashValue" start="2467" end="2472" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Read hash value by key."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="hash key" type="object">
        <type full="key" namespace="" name="key"/>
      </param>
      <param description="(optional) individual property's name" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <return description="value" type="object">
        <type full="hash" namespace="" name="hash"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_setHashValue" start="2489" end="2498" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Write hash value by key."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="hash key" type="object">
        <type full="key" namespace="" name="key"/>
      </param>
      <param description="hash value" type="object">
        <type full="value" namespace="" name="value"/>
      </param>
      <param description="(optional) individual property's name" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_incHashValue" start="2516" end="2525" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Increase a hash value by specified increment atomically."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="hash key" type="object">
        <type full="key" namespace="" name="key"/>
      </param>
      <param description="individual property's name" type="object">
        <type full="prop_name" namespace="" name="prop_name"/>
      </param>
      <param description="(optional) default is 1" type="object">
        <type full="increment" namespace="" name="increment"/>
      </param>
      <return description="hash value" type="object">
        <type full="incremented" namespace="" name="incremented"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="prop_name" byreference="false" type="{unknown}"/>
    <parameter name="increment" byreference="false" type="integer" default="1"/>
  </method>
  <method name="data_removeHashKey" start="2540" end="2544" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a hash key and its values."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="hash key" type="object">
        <type full="key" namespace="" name="key"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_removeHashKeys" start="2559" end="2563" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove hash keys and their values."/>
      <param description="object type's name" type="object">
        <type full="obj_type" namespace="" name="obj_type"/>
      </param>
      <param description="hash keys" type="object">
        <type full="keys" namespace="" name="keys"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_type" byreference="false" type="{unknown}"/>
    <parameter name="keys" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_defineAssociation" start="2582" end="2590" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Define an object association."/>
      <param description="name of this association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="1: one-way 2: two-way symmetric 3: two-way asymmetric" type="object">
        <type full="assoc_type" namespace="" name="assoc_type"/>
      </param>
      <param description="needed info about first object type" type="object">
        <type full="assoc_info1" namespace="" name="assoc_info1"/>
      </param>
      <param description="needed info about second object type" type="object">
        <type full="assoc_info2" namespace="" name="assoc_info2"/>
      </param>
      <param description="(optional) name of reverse association" type="object">
        <type full="inverse" namespace="" name="inverse"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="assoc_type" byreference="false" type="{unknown}"/>
    <parameter name="assoc_info1" byreference="false" type="{unknown}"/>
    <parameter name="assoc_info2" byreference="false" type="{unknown}"/>
    <parameter name="inverse" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_undefineAssociation" start="2605" end="2608" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Undefine an object association."/>
      <param description="name of this association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_renameAssociation" start="2627" end="2634" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rename an object association or aliases."/>
      <param description="name of this association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="(optional) new name of this association" type="object">
        <type full="new_name" namespace="" name="new_name"/>
      </param>
      <param description="(optional) new alias for object type 1" type="object">
        <type full="new_alias1" namespace="" name="new_alias1"/>
      </param>
      <param description="(optional) new alias for object type 2" type="object">
        <type full="new_alias2" namespace="" name="new_alias2"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_ALREADY_EXISTS
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="new_name" byreference="false" type="{unknown}"/>
    <parameter name="new_alias1" byreference="false" type="{unknown}" default="null"/>
    <parameter name="new_alias2" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_getAssociationDefinition" start="2649" end="2652" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get definition of an object association."/>
      <param description="name of this association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <return description="association" type="object">
        <type full="specified" namespace="" name="specified"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getAssociationDefinitions" start="2664" end="2667" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get definition of all associations."/>
      <return description="defined associations" type="object">
        <type full="all" namespace="" name="all"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
  </method>
  <method name="data_setAssociation" start="2685" end="2693" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create or modify an association between two objects."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="id of first object" type="object">
        <type full="obj_id1" namespace="" name="obj_id1"/>
      </param>
      <param description="id of second object" type="object">
        <type full="obj_id2" namespace="" name="obj_id2"/>
      </param>
      <param description="(optional) extra string data to store" type="object">
        <type full="data" namespace="" name="data"/>
      </param>
      <param description="(optional) extra time data; default to creation time" type="object">
        <type full="assoc_time" namespace="" name="assoc_time"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_id1" byreference="false" type="{unknown}"/>
    <parameter name="obj_id2" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
    <parameter name="assoc_time" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_setAssociations" start="2708" end="2712" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create or modify associations between objects."/>
      <param description="associations to set" type="object">
        <type full="assocs" namespace="" name="assocs"/>
      </param>
      <param description="(optional) name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="assocs" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_removeAssociation" start="2728" end="2733" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove an association between two objects."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="id of first object" type="object">
        <type full="obj_id1" namespace="" name="obj_id1"/>
      </param>
      <param description="id of second object" type="object">
        <type full="obj_id2" namespace="" name="obj_id2"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_id1" byreference="false" type="{unknown}"/>
    <parameter name="obj_id2" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_removeAssociations" start="2748" end="2752" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove associations between objects by specifying pairs of object ids."/>
      <param description="associations to remove" type="object">
        <type full="assocs" namespace="" name="assocs"/>
      </param>
      <param description="(optional) name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="assocs" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="data_removeAssociatedObjects" start="2768" end="2772" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove associations between objects by specifying one object id."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="who's association to remove" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getAssociatedObjects" start="2790" end="2795" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve a list of associated objects."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="who's association to retrieve" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <param description="only return object ids" type="object">
        <type full="no_data" namespace="" name="no_data"/>
      </param>
      <return description="objects" type="object">
        <type full="associated" namespace="" name="associated"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
    <parameter name="no_data" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="data_getAssociatedObjectCount" start="2812" end="2816" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Count associated objects."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="who's association to retrieve" type="object">
        <type full="obj_id" namespace="" name="obj_id"/>
      </param>
      <return description="object's count" type="object">
        <type full="associated" namespace="" name="associated"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getAssociatedObjectCounts" start="2833" end="2837" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a list of associated object counts."/>
      <param description="name of association" type="object">
        <type full="name" namespace="" name="name"/>
      </param>
      <param description="whose association to retrieve" type="object">
        <type full="obj_ids" namespace="" name="obj_ids"/>
      </param>
      <return description="object counts" type="object">
        <type full="associated" namespace="" name="associated"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_DATA_OBJECT_NOT_FOUND
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_INVALID_OPERATION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="obj_ids" byreference="false" type="{unknown}"/>
  </method>
  <method name="data_getAssociations" start="2853" end="2858" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find all associations between two objects."/>
      <param description="id of first object" type="object">
        <type full="obj_id1" namespace="" name="obj_id1"/>
      </param>
      <param description="id of second object" type="object">
        <type full="obj_id2" namespace="" name="obj_id2"/>
      </param>
      <param description="only return association names without data" type="object">
        <type full="no_data" namespace="" name="no_data"/>
      </param>
      <return description="associations between objects" type="object">
        <type full="all" namespace="" name="all"/>
      </return>
      <error>API_EC_DATA_DATABASE_ERROR
   API_EC_PARAM
   API_EC_PERMISSION
   API_EC_DATA_QUOTA_EXCEEDED
   API_EC_DATA_UNKNOWN_ERROR</error>
    </docblock>
    <parameter name="obj_id1" byreference="false" type="{unknown}"/>
    <parameter name="obj_id2" byreference="false" type="{unknown}"/>
    <parameter name="no_data" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="admin_getAppProperties" start="2867" end="2871" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the properties that you have set for an app."/>
      <param description="List of properties names to fetch" type="object">
        <type full="properties" namespace="" name="properties"/>
      </param>
      <return description="A map from property name to value" type="array"/>
    </docblock>
    <parameter name="properties" byreference="false" type="{unknown}"/>
  </method>
  <method name="admin_setAppProperties" start="2880" end="2883" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set properties for an app."/>
      <param description="A map from property names to values" type="object">
        <type full="properties" namespace="" name="properties"/>
      </param>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="properties" byreference="false" type="{unknown}"/>
  </method>
  <method name="admin_getAllocation" start="2896" end="2900" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the allocation limit value for a specified integration point name Integration point names are defined in lib/api/karma/constants.php in the limit_map."/>
      <param description="Name of an integration point" type="string" variable="$integration_point_name">(see developer wiki for list).</param>
      <param description="Specific user to check the limit." type="int" variable="$uid"/>
      <return description="Integration point allocation value" type="int"/>
    </docblock>
    <parameter name="integration_point_name" byreference="false" type="{unknown}"/>
    <parameter name="uid" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="admin_getMetrics" start="2914" end="2920" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns values for the specified metrics for the current application, in the given time range.  The metrics are collected for fixed-length periods, and the times represent midnight at the end of each period."/>
      <param description="unix time for the start of the range" type="object">
        <type full="start_time" namespace="" name="start_time"/>
      </param>
      <param description="unix time for the end of the range" type="object">
        <type full="end_time" namespace="" name="end_time"/>
      </param>
      <param description="number of seconds in the desired period" type="object">
        <type full="period" namespace="" name="period"/>
      </param>
      <param description="list of metrics to look up" type="object">
        <type full="metrics" namespace="" name="metrics"/>
      </param>
      <return description="A map of the names and values for those metrics" type="array"/>
    </docblock>
    <parameter name="start_time" byreference="false" type="{unknown}"/>
    <parameter name="end_time" byreference="false" type="{unknown}"/>
    <parameter name="period" byreference="false" type="{unknown}"/>
    <parameter name="metrics" byreference="false" type="{unknown}"/>
  </method>
  <method name="admin_setRestrictionInfo" start="2934" end="2941" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets application restriction info.">Applications can restrict themselves to only a limited user demographic
based on users' age and/or location or based on static predefined types
specified by facebook for specifying diff age restriction for diff
locations.</description>
      <param description="The age restriction settings to set." type="array" variable="$restriction_info"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="restriction_info" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="admin_getRestrictionInfo" start="2953" end="2957" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets application restriction info.">Applications can restrict themselves to only a limited user demographic
based on users' age and/or location or based on static predefined types
specified by facebook for specifying diff age restriction for diff
locations.</description>
      <return description="The age restriction settings for this application." type="array"/>
    </docblock>
  </method>
  <method name="admin_banUsers" start="2967" end="2970" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Bans a list of users from the app. Banned users can't access the app's canvas page and forums."/>
      <param description="an array of user ids" type="array" variable="$uids"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="uids" byreference="false" type="{unknown}"/>
  </method>
  <method name="admin_unbanUsers" start="2979" end="2982" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unban users that have been previously banned with admin_banUsers()."/>
      <param description="an array of user ids" type="array" variable="$uids"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="uids" byreference="false" type="{unknown}"/>
  </method>
  <method name="admin_getBannedUsers" start="2994" end="2998" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the list of users that have been banned from the application.">$uids is an optional parameter that filters the result with the list
of provided user ids. If $uids is provided,
only banned user ids that are contained in $uids are returned.</description>
      <param description="an array of user ids to filter by" type="array" variable="$uids"/>
      <return description="true on success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="uids" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="call_method" start="3013" end="3036" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls the specified normal POST method with the specified parameters."/>
      <param description="Name of the Facebook method to invoke" type="string" variable="$method"/>
      <param description="A map of param names =&gt; param values" type="array" variable="$params"/>
      <return description="Result of method call; this returns a reference to support" type="mixed">'delayed returns' when in a batch context.
    See: http://wiki.developers.facebook.com/index.php/Using_batching_API</return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="array"/>
  </method>
  <method name="convert_result" start="3038" end="3043" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFormat" start="3050" end="3053" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Change the response format"/>
      <param description="The response format (json, xml)" type="string" variable="$format"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFormat" start="3060" end="3062" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="get the current response serialization format"/>
      <return description="'xml', 'json', or null (which means 'xml')" type="string"/>
    </docblock>
  </method>
  <method name="getRawData" start="3070" end="3072" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the raw JSON or XML output returned by the server in the most recent API call."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="call_upload_method" start="3083" end="3114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls the specified file-upload POST method with the specified parameters"/>
      <param description="Name of the Facebook method to invoke" type="string" variable="$method"/>
      <param description="A map of param names =&gt; param values" type="array" variable="$params"/>
      <param description="A path to the file to upload (required)" type="string" variable="$file"/>
      <return description="A dictionary representing the response." type="array"/>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="server_addr" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="convert_xml_to_result" start="3116" end="3136" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="xml" byreference="false" type="{unknown}"/>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="output the raw xml and its corresponding php object, for debugging:" line="3121"/>
    </inline>
  </method>
  <method name="finalize_params" start="3138" end="3145" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="we need to do this before signing the params" line="3140"/>
    </inline>
  </method>
  <method name="convert_array_values_to_json" start="3147" end="3153" abstract="false" final="false" static="false" visibility="private">
    <parameter name="params" byreference="true" type="{unknown}"/>
  </method>
  <method name="add_standard_params" start="3159" end="3188" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Add the generally required params to our request.">Params method, api_key, and v should be sent over as get.</description>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <method name="create_url_string" start="3190" end="3196" abstract="false" final="false" static="false" visibility="private">
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <method name="run_multipart_http_transaction" start="3198" end="3227" abstract="false" final="false" static="false" visibility="private">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="server_addr" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="the format of this message is specified in RFC1867/RFC1341." line="3200"/>
      <comment value="we add twenty pseudo-random digits to the end of the boundary string." line="3201"/>
      <comment value="within the message, we prepend two extra hyphens." line="3206"/>
      <comment value="now add the file data" line="3216"/>
    </inline>
  </method>
  <method name="post_request" start="3229" end="3253" abstract="false" final="false" static="false" visibility="public">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <method name="curl_exec" start="3261" end="3264" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="execute a curl transaction -- this exists mostly so subclasses can add extra options and/or process the response, if they wish."/>
      <param description="a curl handle" type="resource" variable="$ch"/>
    </docblock>
    <parameter name="ch" byreference="false" type="{unknown}"/>
  </method>
  <method name="post_upload_request" start="3266" end="3290" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="server_addr" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="prepending '@' causes cURL to upload the file; the key is ignored." line="3272"/>
      <comment value="this has to come before the POSTFIELDS set!" line="3277"/>
      <comment value="passing an array gets curl to use the multipart/form-data content type" line="3279"/>
    </inline>
  </method>
  <method name="run_http_post_transaction" start="3292" end="3314" abstract="false" final="false" static="false" visibility="private">
    <parameter name="content_type" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="server_addr" byreference="false" type="{unknown}"/>
  </method>
  <method name="convert_simplexml_to_array" start="3316" end="3332" abstract="false" final="false" static="true" visibility="public">
    <parameter name="sxml" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_uid" start="3334" end="3336" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="uid" byreference="false" type="{unknown}"/>
  </method>
</class>
