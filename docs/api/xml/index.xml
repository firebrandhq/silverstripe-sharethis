<?xml version="1.0" encoding="UTF-8"?>
<index xmlns="http://xml.phpdox.net/src" basedir="/var/www/_modules/sharethis/trunk">
  <namespace name="">
    <class name="ShareThisDataObject" src="code/model/ShareThisDataObject.php" xml="classes/ShareThisDataObject.xml"/>
    <class name="FacebookFeed_Item" src="code/model/FacebookFeed_Item.php" description="FROM: http://www.acornartwork.com/blog/2010/04/19/tutorial-facebook-rss-feed-parser-in-pure-php/ EXAMPLE: &#9;//Run the function with the url and a number as arguments &#9;$fb = new TheFaceBook_communicator(); &#9;$dos = $fb-&gt;fetchFBFeed('http://facebook.com/feeds/status.php?id=xxxxxx&amp;viewer=xxxxxx&amp;key=xxxxx&amp;format=rss20', 3); &#9;//Print Facebook status updates &#9;echo '&lt;ul class=&quot;fb-updates&quot;&gt;'; &#9;&#9; foreach ($dos as $do) { &#9;&#9;&#9;&#9;echo '&lt;li&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;update&quot;&gt;' .$do-&gt;Description. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;date&quot;&gt;' .$do-&gt;Date. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;link&quot;&gt;&lt;a href=&quot;' .$do-&gt;Link. '&quot;&gt;more&lt;/a&gt;&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;/li&gt;'; &#9;&#9; } &#9;echo '&lt;/ul&gt;';" xml="classes/FacebookFeed_Item.xml"/>
    <class name="SocialNetworkingLinksDataObject" src="code/model/SocialNetworkingLinksDataObject.php" description="author nicolaas[at]sunnysideup.co.nz description: creates a list of places where people can follow you (e.g. twitter, your blog, etc...)" xml="classes/SocialNetworkingLinksDataObject.xml"/>
    <class name="FacebookFeed_Page" src="code/model/FacebookFeed_Page.php" description="FROM: http://www.acornartwork.com/blog/2010/04/19/tutorial-facebook-rss-feed-parser-in-pure-php/ EXAMPLE: &#9;//Run the function with the url and a number as arguments &#9;$fb = new TheFaceBook_communicator(); &#9;$dos = $fb-&gt;fetchFBFeed('http://facebook.com/feeds/status.php?id=xxxxxx&amp;viewer=xxxxxx&amp;key=xxxxx&amp;format=rss20', 3); &#9;//Print Facebook status updates &#9;echo '&lt;ul class=&quot;fb-updates&quot;&gt;'; &#9;&#9; foreach ($dos as $do) { &#9;&#9;&#9;&#9;echo '&lt;li&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;update&quot;&gt;' .$do-&gt;Description. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;date&quot;&gt;' .$do-&gt;Date. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;link&quot;&gt;&lt;a href=&quot;' .$do-&gt;Link. '&quot;&gt;more&lt;/a&gt;&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;/li&gt;'; &#9;&#9; } &#9;echo '&lt;/ul&gt;';" xml="classes/FacebookFeed_Page.xml"/>
    <class name="MyTwitterData" src="code/model/MyTwitterData.php" xml="classes/MyTwitterData.xml"/>
    <class name="FacebookFeed_Item_Communicator" src="code/api/FacebookFeed_Item_Communicator.php" xml="classes/FacebookFeed_Item_Communicator.xml"/>
    <class name="TheFaceBook_communicator" src="code/api/TheFaceBook_communicator.php" description="STOLEN FROM: http://www.acornartwork.com/blog/2010/04/19/tutorial-facebook-rss-feed-parser-in-pure-php/ EXAMPLE: &#9;//Run the function with the url and a number as arguments &#9;$fb = new TheFaceBook_communicator(); &#9;$dos = $fb-&gt;fetchFBFeed('http://facebook.com/feeds/status.php?id=xxxxxx&amp;viewer=xxxxxx&amp;key=xxxxx&amp;format=rss20', 3); &#9;//Print Facebook status updates &#9;echo '&lt;ul class=&quot;fb-updates&quot;&gt;'; &#9;&#9; foreach ($dos as $do) { &#9;&#9;&#9;&#9;echo '&lt;li&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;update&quot;&gt;' .$do-&gt;Description. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;date&quot;&gt;' .$do-&gt;Date. '&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;span class=&quot;link&quot;&gt;&lt;a href=&quot;' .$do-&gt;Link. '&quot;&gt;more&lt;/a&gt;&lt;/span&gt;'; &#9;&#9;&#9;&#9;echo '&lt;/li&gt;'; &#9;&#9; } &#9;echo '&lt;/ul&gt;';" xml="classes/TheFaceBook_communicator.xml"/>
    <class name="MyTwitter" src="code/api/MyTwitter.php" xml="classes/MyTwitter.xml"/>
    <class name="simple_html_dom_node" src="code/api/thirdparty/simple_html_dom.php" description="simple html dom node PaperG - added ability for &quot;find&quot; routine to lowercase the value of the selector." xml="classes/simple_html_dom_node.xml"/>
    <class name="simple_html_dom" src="code/api/thirdparty/simple_html_dom.php" description="simple html dom parser Paperg - in the find routine: allow us to specify that we want case insensitive testing of the value of the selector." xml="classes/simple_html_dom.xml"/>
    <class name="ShareThisSiteConfigDE" src="code/extension/ShareThisSiteConfigDE.php" xml="classes/ShareThisSiteConfigDE.xml"/>
    <class name="ShareThisSTE" src="code/extension/ShareThisSTE.php" description="Add a field to each SiteTree object and it's subclasses to enable Share icons." xml="classes/ShareThisSTE.xml"/>
    <class name="SocialNetworksSTE" src="code/extension/SocialNetworksSTE.php" description="Add a field to each SiteTree object and it's subclasses to enable &quot;follow us on ...&quot;, this can be a blog, twitter, facebook or whatever else." xml="classes/SocialNetworksSTE.xml"/>
    <class name="ShareThisOptions" src="code/data/ShareThisOptions.php" xml="classes/ShareThisOptions.xml"/>
    <class name="FacebookFeed_UpdateTask" src="code/tasks/FacebookFeed_UpdateTask.php" xml="classes/FacebookFeed_UpdateTask.xml"/>
    <class name="SocialNetworkingModelAdmin" src="code/cms/SocialNetworkingModelAdmin.php" description="author: nicolaas[at]sunnysideup.co.nz description: manages social networking data objects" xml="classes/SocialNetworkingModelAdmin.xml"/>
    <class name="FacebookRestClient" src="third_party/facebookapi_php5_restlib.php" xml="classes/FacebookRestClient.xml"/>
    <class name="FacebookRestClientException" src="third_party/facebookapi_php5_restlib.php" xml="classes/FacebookRestClientException.xml"/>
    <class name="FacebookAPIErrorCodes" src="third_party/facebookapi_php5_restlib.php" description="Error codes and descriptions for the Facebook API." xml="classes/FacebookAPIErrorCodes.xml"/>
    <class name="FacebookApiException" src="third_party/facebook.php" description="Thrown when an API call returns an exception." xml="classes/FacebookApiException.xml"/>
    <class name="Facebook" src="third_party/facebook.php" description="Provides access to the Facebook Platform." xml="classes/Facebook.xml"/>
    <class name="Services_JSON" src="third_party/jsonwrapper/JSON/JSON.php" description="Converts to and from JSON format." xml="classes/Services_JSON.xml"/>
    <class name="Services_JSON_Error" src="third_party/jsonwrapper/JSON/JSON.php" xml="classes/Services_JSON_Error.xml"/>
    <class name="OAuthException" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthException.xml"/>
    <class name="OAuthConsumer" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthConsumer.xml"/>
    <class name="OAuthToken" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthToken.xml"/>
    <class name="OAuthSignatureMethod" src="third_party/twitter_oauth/OAuth.php" description="A class for implementing a Signature Method See section 9 (&quot;Signing Requests&quot;) in the spec" xml="classes/OAuthSignatureMethod.xml"/>
    <class name="OAuthSignatureMethod_HMAC_SHA1" src="third_party/twitter_oauth/OAuth.php" description="The HMAC-SHA1 signature method uses the HMAC-SHA1 signature algorithm as defined in [RFC2104] where the Signature Base String is the text and the key is the concatenated values (each first encoded per Parameter Encoding) of the Consumer Secret and Token Secret, separated by an '&amp;' character (ASCII code 38) even if empty." xml="classes/OAuthSignatureMethod_HMAC_SHA1.xml"/>
    <class name="OAuthSignatureMethod_PLAINTEXT" src="third_party/twitter_oauth/OAuth.php" description="The PLAINTEXT method does not provide any security protection and SHOULD only be used over a secure channel such as HTTPS. It does not use the Signature Base String." xml="classes/OAuthSignatureMethod_PLAINTEXT.xml"/>
    <class name="OAuthSignatureMethod_RSA_SHA1" src="third_party/twitter_oauth/OAuth.php" description="The RSA-SHA1 signature method uses the RSASSA-PKCS1-v1_5 signature algorithm as defined in [RFC3447] section 8.2 (more simply known as PKCS#1), using SHA-1 as the hash function for EMSA-PKCS1-v1_5. It is assumed that the Consumer has provided its RSA public key in a verified way to the Service Provider, in a manner which is beyond the scope of this specification." xml="classes/OAuthSignatureMethod_RSA_SHA1.xml"/>
    <class name="OAuthRequest" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthRequest.xml"/>
    <class name="OAuthServer" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthServer.xml"/>
    <class name="OAuthDataStore" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthDataStore.xml"/>
    <class name="OAuthUtil" src="third_party/twitter_oauth/OAuth.php" xml="classes/OAuthUtil.xml"/>
    <class name="TwitterOAuth" src="third_party/twitter_oauth/TwitterOAuthConsumer.php" description="Twitter OAuth class" xml="classes/TwitterOAuth.xml"/>
    <class name="Exception" xml="classes/Exception.xml"/>
  </namespace>
</index>
